
extInt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000318  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000318  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000340  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000340  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000535  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000129  00000000  00000000  0002057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000206a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00020720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001064  00000000  00000000  00020780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000055e  00000000  00000000  000217e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004269  00000000  00000000  00021d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00025fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  00026000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000300 	.word	0x08000300

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000300 	.word	0x08000300

08000170 <_Z5delaym>:
uint32_t* NVIC_ISER0 = (uint32_t*)0xE000E100;
uint32_t* NVIC_ICER0 = (uint32_t*)0xE000E180;


void delay(uint32_t del)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
for( ; del; del--)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d00e      	beq.n	800019c <_Z5delaym+0x2c>
	 for(int i=0;i<3910;i++);
 800017e:	2300      	movs	r3, #0
 8000180:	60fb      	str	r3, [r7, #12]
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	f640 7245 	movw	r2, #3909	; 0xf45
 8000188:	4293      	cmp	r3, r2
 800018a:	dc03      	bgt.n	8000194 <_Z5delaym+0x24>
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	3301      	adds	r3, #1
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	e7f6      	b.n	8000182 <_Z5delaym+0x12>
for( ; del; del--)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3b01      	subs	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e7ed      	b.n	8000178 <_Z5delaym+0x8>
}
 800019c:	bf00      	nop
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
	...

080001a8 <main>:
uint32_t del = 100;

uint8_t pinNumber = 4;

int main()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<2) | (1<<3) | (1<<0);
 80001ac:	4b25      	ldr	r3, [pc, #148]	; (8000244 <main+0x9c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	699a      	ldr	r2, [r3, #24]
 80001b2:	4b24      	ldr	r3, [pc, #144]	; (8000244 <main+0x9c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f042 020d 	orr.w	r2, r2, #13
 80001ba:	619a      	str	r2, [r3, #24]
	GPIOA->CRL = 0X88888888;
 80001bc:	4b22      	ldr	r3, [pc, #136]	; (8000248 <main+0xa0>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001c4:	601a      	str	r2, [r3, #0]

	GPIOB->CRH  = 0X3 <<(4*4);
 80001c6:	4b21      	ldr	r3, [pc, #132]	; (800024c <main+0xa4>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001ce:	605a      	str	r2, [r3, #4]

	AFIO -> AFIO_EXTICR1 &= 0x0000;
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <main+0xa8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2200      	movs	r2, #0
 80001d6:	609a      	str	r2, [r3, #8]

	EXTI -> IMR |= (1 << pinNumber);
 80001d8:	4b1e      	ldr	r3, [pc, #120]	; (8000254 <main+0xac>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <main+0xb0>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4619      	mov	r1, r3
 80001e4:	2301      	movs	r3, #1
 80001e6:	408b      	lsls	r3, r1
 80001e8:	4619      	mov	r1, r3
 80001ea:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <main+0xac>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	430a      	orrs	r2, r1
 80001f0:	601a      	str	r2, [r3, #0]
	//EXTI -> RTSR &= 0x00000000;

	EXTI -> RTSR |= (1 << pinNumber);
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <main+0xac>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	689a      	ldr	r2, [r3, #8]
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <main+0xb0>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4619      	mov	r1, r3
 80001fe:	2301      	movs	r3, #1
 8000200:	408b      	lsls	r3, r1
 8000202:	4619      	mov	r1, r3
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <main+0xac>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	430a      	orrs	r2, r1
 800020a:	609a      	str	r2, [r3, #8]

	*NVIC_ISER0 |= (1 << (6+pinNumber));
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0xb4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b11      	ldr	r3, [pc, #68]	; (8000258 <main+0xb0>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	3306      	adds	r3, #6
 8000218:	2101      	movs	r1, #1
 800021a:	fa01 f303 	lsl.w	r3, r1, r3
 800021e:	4619      	mov	r1, r3
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0xb4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
  // remmember this will work upto gpio4 ,
	//because gpio 5 to 9 uses same interrupt handler . and has IRQ number  23

	while(1)
	 {
	  GPIOB->ODR^=0x1000;    // this is same as above commencted code / 0b1000 0000 0000
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <main+0xa4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	68da      	ldr	r2, [r3, #12]
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <main+0xa4>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000236:	60da      	str	r2, [r3, #12]
    delay(del);
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0xb8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff97 	bl	8000170 <_Z5delaym>
	  GPIOB->ODR^=0x1000;    // this is same as above commencted code / 0b1000 0000 0000
 8000242:	e7f1      	b.n	8000228 <main+0x80>
 8000244:	20000000 	.word	0x20000000
 8000248:	20000004 	.word	0x20000004
 800024c:	20000008 	.word	0x20000008
 8000250:	2000000c 	.word	0x2000000c
 8000254:	20000010 	.word	0x20000010
 8000258:	2000001c 	.word	0x2000001c
 800025c:	20000014 	.word	0x20000014
 8000260:	20000018 	.word	0x20000018

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ff87 	bl	80001a8 <main>

0800029a <LoopForever>:

LoopForever:
    b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80002b0:	2000003c 	.word	0x2000003c

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	2600      	movs	r6, #0
 80002bc:	4d0c      	ldr	r5, [pc, #48]	; (80002f0 <__libc_init_array+0x38>)
 80002be:	4c0d      	ldr	r4, [pc, #52]	; (80002f4 <__libc_init_array+0x3c>)
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	10a4      	asrs	r4, r4, #2
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	f000 f81a 	bl	8000300 <_init>
 80002cc:	2600      	movs	r6, #0
 80002ce:	4d0a      	ldr	r5, [pc, #40]	; (80002f8 <__libc_init_array+0x40>)
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <__libc_init_array+0x44>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
